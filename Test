library( readxl) ## read excel file
library( data.table) ## read csv file
library( dplyr) ## data manipulation
library( RODBC) ## Database
library( ggplot2) ## Visualization
library( tidyr) ## reshape
library( RColorBrewer) ## Color for Plot
#library( flexdashboard) ## 
setwd( "F:/Data Analysis Requirement/2017.11/2017-11-21 【数据校验】 热云")
## Global Var
start_date <- '2017-09-01'
end_date <- '2017-09-30'

## APPID configs
mysqlgame <- odbcConnect( "game_platform", uid = "data_center", pwd = "sjzxytjhv587")
reyun_config_ios <- sqlQuery( mysqlgame, 
                           paste0( 
                             "SELECT APP_KEY as APPID, PACKAGE_ID, GAME_ID FROM game_platform.reyun_config"
                           ), 
                           stringsAsFactors = FALSE)
reyun_config_android <- sqlQuery( mysqlgame, 
                          paste0( 
                            "SELECT APP_ID as APPID, PACKAGE_ID, GAME_ID FROM game_platform.third_statis_config"
                          ), 
                          stringsAsFactors = FALSE)
reyun_config <- rbind( reyun_config_ios, reyun_config_android)  ## 合并两份配置表
rm( reyun_config_ios, reyun_config_android)  # 删除变量
gc() # 释放内存
odbcClose( mysqlgame) 


## reyun active info reading & data process... 
# 热云数据集中，用户的设备标识分为两类：IDFA/IMEI，前者IOS后者安卓。
# 第一步先要将激活用户的设备信息找出，到我们后台匹配相对应的账号。

# IDFA 
mysqlbase <- odbcConnect( "mysqlbase", uid = "data_center", pwd = "sjzxytjhv587")
base_reyun_idfa <- sqlQuery( mysqlbase, 
                                paste0( 
                                  "SELECT DEVICE_CODE, APPID, IDFA, IMEI, ACTIVE_TIME, CHANNEL, IP",
                                  " FROM base_platform.api_ad_reyun_trackingio",
                                  " WHERE ACTIVE_TIME between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                                  " AND IDFA != ''; "
                                ), 
                                stringsAsFactors = FALSE)
# Delele IDFA == '00000000-0000-0000-0000-000000000000', 这类IDFA 很容易匹配到其他渠道进来的同样的IDFA。
base_reyun_idfa <- filter( base_reyun_idfa,
                           IDFA != "00000000-0000-0000-0000-000000000000")
# select unique DEVICE_CODED for next query.
reyun_idfa <- gsub( " ", "", 
                    paste( "'", paste( unique( base_reyun_idfa$IDFA)), "'", collapse = ",")
)
# Match the PackageID & GameID, 给每条 IDFA 打上 CHANNEL 和 package_ID 标签，用于追踪手盟设备标识、注册时间、充值。
base_reyun_idfa <- merge( base_reyun_idfa, reyun_config, by = "APPID", all.x = TRUE )

# IMEI
base_reyun_imei <- sqlQuery( mysqlbase, 
                             paste0( 
                               "SELECT DEVICE_CODE, APPID, IDFA, IMEI, ACTIVE_TIME, CHANNEL, IP",
                               " FROM base_platform.api_ad_reyun_trackingio",
                               " WHERE ACTIVE_TIME between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                               " AND IMEI != ''; "
                             ), 
                             stringsAsFactors = FALSE)
# Delele IMEI == '00000000', 这类IDFA 很容易匹配到其他渠道进来的同样的IDFA。
base_reyun_imei <- filter( base_reyun_imei,
                           IDFA != "00000000")
# select unique DEVICE_CODED for next query.
reyun_imei <- gsub( " ", "", 
                    paste( "'", paste( unique( base_reyun_imei$IMEI)), "'", collapse = ",")
)
# Match the PackageID & GameID, 给每条 IDFA 打上 CHANNEL 和 package_ID 标签，用于追踪手盟设备标识、注册时间、充值。
base_reyun_imei <- merge( base_reyun_imei, reyun_config, by = "APPID", all.x = TRUE )
odbcClose( mysqlbase)


## 跳板！read IDFA_Device_user table and get Devcie_Code info, to match the register info in p_user..
#  
mysqlpp <- odbcConnect( "mysqlpp", uid = "data_center", pwd = "sjzxytjhv587")
if( nrow( base_reyun_imei) > 0){
  imei_deviceCode <- sqlQuery( mysqlpp, 
                               paste0( 
                                 "SELECT distinct IMEI, DEVICE_CODE",  ## devices的IMEI 是真实值
                                 " FROM pp_platform.devices",
                                 " WHERE ACTIVATE_TIME between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                                 " AND IMEI in (", reyun_imei, 
                                 ") "
                               ), 
                               stringsAsFactors = FALSE)
  # 建立reyun中 imei&channel 与 device_user 的一一映射，目的是为了追踪 idfa 的注册、充值，并划分渠道。
  imei_deviceCode <- merge( unique( imei_deviceCode), select( base_reyun_imei, IMEI, CHANNEL, PACKAGE_ID), by = "IMEI", all.x = TRUE )
}
odbcClose( mysqlpp)

#  IOS的IDFA 唯一性较强，因此从idfa_device 表中匹配账号即可；而安卓的 IMEI唯一性较弱，需要从 device 表中匹配信息。
#  通过IDFA，处理后用于匹配 idfa_device_user 表中的Device_code，在利用Device_Code 匹配相应的注册信息&账号。
mysqlbase <- odbcConnect( "mysqlbase", uid = "data_center", pwd = "sjzxytjhv587")
if( nrow( base_reyun_idfa) > 0){
  idfa_deviceCode <- sqlQuery( mysqlbase, 
                               paste0( 
                                 "SELECT distinct IDFA, DEVICE_CODE",  ## idfa_device 中只有 IDFA 和 device_code，因此只能作为跳板
                                 " FROM base_platform.idfa_device_user",
                                 " WHERE ADD_TIME between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                                 " AND IDFA in (", reyun_idfa, 
                                 ") "
                                 ), 
                                stringsAsFactors = FALSE)
  # 建立reyun中 idfa&channel 与 device_user 的一一映射，目的是为了追踪 idfa 的注册、充值，并划分渠道。
  idfa_deviceCode <- merge( unique( idfa_deviceCode), select( base_reyun_idfa, IDFA, CHANNEL, PACKAGE_ID), by = "IDFA", all.x = TRUE )
}

odbcClose( mysqlbase)


# 跳板
if( nrow( base_reyun_imei) > 0){
  names( imei_deviceCode)[1] <- "IDFA"
  idfa_deviceCode <- rbind( idfa_deviceCode, imei_deviceCode)
} 
write.csv( idfa_deviceCode, "idfa_deviceCode09.csv")


idfa_deviceCode_char <- gsub( " ", "", 
                              paste( "'", paste( unique( idfa_deviceCode$DEVICE_CODE)), "'", collapse = ",")
)


## Active 统计
active_st <- select( base_reyun_idfa,
                     CHANNEL, IDFA, ACTIVE_TIME, PACKAGE_ID) %>%
  mutate( ACTIVE_DATE = as.Date( format( ACTIVE_TIME, format = "%Y-%m-%d"))) %>% 
  group_by( ACTIVE_DATE, IDFA, PACKAGE_ID, CHANNEL) %>%
  summarise( active_num = n()) %>%
  group_by( ACTIVE_DATE, CHANNEL, PACKAGE_ID) %>%  # 按IDFA设备 去重
  summarise( active_num = n())


## read user regiser info by device code picked above...
## 通过上面的device_code，读取的用户的注册信息
mysqlpp <- odbcConnect( "mysqlpp", uid = "data_center", pwd = "sjzxytjhv587")
register_info <- sqlQuery( mysqlpp, 
                           paste0( 
                             "SELECT DEVICE_CODE, PACKAGE_ID, LOGIN_ACCOUNT, REGISTER_TIME",
                             " FROM pp_platform.p_user",
                             " WHERE REGISTER_TIME between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                             " AND DEVICE_CODE in (",
                             idfa_deviceCode_char, ")"
                             ), 
                           stringsAsFactors = FALSE)
odbcClose( mysqlpp) 

# 统计（by DEVICE_CODE, PACKAGE_ID
register_st <- mutate( register_info,
                       REGISTER_DATE = as.Date( format( REGISTER_TIME, format = "%Y-%m-%d"))) %>%
  group_by( REGISTER_DATE, DEVICE_CODE, LOGIN_ACCOUNT, PACKAGE_ID) %>%
  summarise( register_num = n()) %>%
  group_by( REGISTER_DATE, DEVICE_CODE, PACKAGE_ID) %>%  # 按设备去重
  summarise( register_num  = n())
# 匹配
register_st <- merge( register_st, idfa_deviceCode, by = c( "DEVICE_CODE", "PACKAGE_ID"), all.x = TRUE) %>% 
  group_by( REGISTER_DATE, CHANNEL, PACKAGE_ID) %>%
  summarise( register_num  = sum( register_num))
  

## 通过上面的device_code，读取充值信息
# 注意：根据激活注册的用户匹配过来的支付信息，仅仅代表统计时间段内，这批用户注册后的充值行为；
# 而统计时间段前注册的账户，未计入在内，因此充值金额会比后台少很多。
mysqlgame <- odbcConnect( "game_platform", uid = "data_center", pwd = "sjzxytjhv587")
payment_info <- sqlQuery( mysqlgame, 
                               paste0( 
                                 "SELECT DEVICE_CODE, LOGIN_ACCOUNT, GAME_ID, PACKAGES_ID as PACKAGE_ID, MONEY, PAY_TIME",
                                 " FROM game_platform.detail_game_payment",
                                 " WHERE pay_time between '", start_date," 00:00:00' AND '", end_date," 23:59:59' ",
                                 " AND DEVICE_CODE in (",
                                 idfa_deviceCode_char, ")"
                               ), 
                               stringsAsFactors = FALSE)
odbcClose( mysqlgame) 

# 统计
payment_st <- mutate( payment_info,
                      PAY_DATE = as.Date( format( PAY_TIME, format = "%Y-%m-%d"))) %>%
  group_by( PAY_DATE, DEVICE_CODE, PACKAGE_ID) %>%
  summarise( pay_num = n(), payment = sum( MONEY)) 

# 匹配
payment_st <- merge( payment_st, idfa_deviceCode, by = c( "DEVICE_CODE", "PACKAGE_ID"), all.x = TRUE) %>% 
  group_by( PAY_DATE, CHANNEL, PACKAGE_ID) %>%
  summarise(pay_num = sum( pay_num), payment = sum( payment))

table( is.na( payment_st$CHANNEL))

## Final ST
final <- merge( active_st, register_st, 
                by.x = c( "ACTIVE_DATE", "CHANNEL", "PACKAGE_ID"),
                by.y = c( "REGISTER_DATE", "CHANNEL", "PACKAGE_ID"),
                all = TRUE) 
final <- merge( final, payment_st, 
                by.x = c( "ACTIVE_DATE", "CHANNEL", "PACKAGE_ID"),
                by.y = c( "PAY_DATE", "CHANNEL", "PACKAGE_ID"),
                all = TRUE) 
filter( final, CHANNEL == "今日头条")

# 统计
final_st <- group_by( final,
                   ACTIVE_DATE, CHANNEL) %>%
  summarise( active_num = sum( active_num, na.rm = TRUE),
             register_num = sum( register_num, na.rm = TRUE),
             pay_num = sum( pay_num, na.rm = TRUE),
             payment = sum( payment, na.rm = TRUE))

write.csv( payment_info, "payment_info.csv")

## Testing
select( base_reyun_idfa,
        CHANNEL, IDFA, ACTIVE_TIME) %>%
  mutate( ACTIVE_DATE = as.Date( format( ACTIVE_TIME, format = "%Y-%m-%d"))) %>% 
  group_by( ACTIVE_DATE) %>%
  summarise( count = n())
